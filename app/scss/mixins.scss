/*
TODO ::
[] Integrate Bourbon to make use of most mixins - http://bourbon.io/docs/
*/
/*-------------------------------------------------
 MIXIN :: CLEARFIX
-------------------------------------------------*/
@mixin clearfix() {
    clear: both;
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/*-------------------------------------------------
 MIXIN :: PIXEL TO EM CONVERTOR
-------------------------------------------------*/
$browser-context: 16; // Default
@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

/*-------------------------------------------------
 MIXIN :: BORDER RADIUS
-------------------------------------------------*/
@mixin borderRadius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
      border-radius: $radius;
}
@mixin borderRadiusCombination($top-left, $top-right, $bottom-right, $bottom-left) {
  -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
  -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
  -ms-border-radius: $top-left $top-right $bottom-right $bottom-left;
      border-radius: $top-left $top-right $bottom-right $bottom-left;
}

/*-------------------------------------------------
 MIXIN :: TRANSITION
-------------------------------------------------*/
@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}

/*-------------------------------------------------
 MIXIN :: BOX SHADOW
-------------------------------------------------*/
@mixin boxShadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

/*-------------------------------------------------
 MIXIN :: SCALE - TRANSFORM
-------------------------------------------------*/
@mixin scale($scale) {
  transform: scale($scale);
  -moz-transform: scale($scale);
  -webkit-transform: scale($scale);
}

/*-------------------------------------------------
 MIXIN :: ROTATE - TRANSFORM
-------------------------------------------------*/
@mixin rotate($rotate) {
  transform: rotate($rotate);
  -moz-transform: rotate($rotate);
  -webkit-transform: rotate($rotate);
}

/*-------------------------------------------------
 MIXIN :: FONT STYLE
-------------------------------------------------*/
//Font styling font-family, font-size and color of the font
@mixin fontStyle($fontFamily, $fontSize, $fontColor) {
  font-family: $fontFamily;
  font-size: $fontSize;
  color: $fontColor;
}

@mixin respond-to($media) {
  @if $media == xs {
    @media only screen and (max-width: $small) { @content; }
  }
  @else if $media == sm {
    @media only screen and (min-width: $small + 1) and (max-width: $medium) { @content; }
  }
  @else if $media == md {
    @media only screen and (min-width: $medium + 1) and (max-width: $large) { @content; }
  }
  @else if $media == lg {
    @media only screen and (min-width: $large +1) { @content; }
  }
}

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}
